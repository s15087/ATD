1.
MATCH (darjeeling {name: 'Darjeeling'}), (sandakphu {name: 'Sandakphu'}),
result = allShortestPaths((darjeeling)-[*]-(sandakphu))
RETURN result

2.
MATCH (darjeeling {name: 'Darjeeling' }), (sandakphu {name: 'Sandakphu'}),
result = allShortestPaths((darjeeling)-[*]-(sandakphu))
WHERE ALL (r IN relationships(result) WHERE r.winter = "true")
RETURN result

3.
MATCH r=(start:town {name: 'Darjeeling'})-[*]->(end:peak {name: 'Sandakphu'})
WITH r, REDUCE(w=0, x IN relationships(r) | w+x.distance) AS distance
RETURN r, distance
ORDER BY distance ASC

4.
MATCH (fli:Flight)-[r:ORIGIN]->(air:Airport)
RETURN air, count(r) as departures
ORDER BY departures ASC

5.
MATCH trip=(origin:Airport {name: "LAX"})<-[r:ORIGIN|DESTINATION*..5]->(destination:Airport)
WHERE REDUCE(s=0, n IN [x IN NODES(trip) WHERE 'Flight' IN LABELS(x)] | s+[(n)<-[:ASSIGN]-(ticket) | ticket.price][0]) < 3000
RETURN trip

6.
MATCH trip=(origin:Airport {name:"LAX"})<-[r:ORIGIN|DESTINATION*..6]->(destination:Airport {name: "DAY"})
RETURN trip, REDUCE(s=0, n IN [x IN NODES(trip) WHERE 'Flight' IN LABELS(x)] | s+[(n)<-[:ASSIGN]-(ticket) | ticket.price][0]) as connection
ORDER BY connection ASC

7.
MATCH trip=(origin:Airport {name:"LAX"})<-[r:ORIGIN|DESTINATION*..6]->(destination:Airport {name: "DAY"})
RETURN trip, REDUCE(s=0, n IN [x IN NODES(trip) WHERE 'Flight' IN LABELS(x)] | s+[(n)<-[:ASSIGN]-(ticket) | ticket.price][0]) as result
ORDER BY result ASC
LIMIT 1

8.
MATCH trip=(origin:Airport {name: "LAX"})<-[:ORIGIN]-(:Flight)-[*..4]-(:Flight)-[:DESTINATION]->(destination:Airport {name: "DAY"})
RETURN trip, REDUCE(expense = 0, flight IN [n IN nodes(trip) WHERE 'Flight' IN labels(n)] | expense + [(flight)<-[:ASSIGN]-(tic:Ticket {class: "business"}) | tic.price][0]) as result
ORDER BY result ASC LIMIT 1

9.
MATCH trip=(origin:Airport)<-[:ORIGIN]-(flig:Flight)-[:DESTINATION]->(destination:Airport)
RETURN destination, COUNT(DISTINCT destination)

10.
MATCH trip=(a1:Airport)<-[o1:ORIGIN]-(f1:Flight)-[d2:DESTINATION]->(a2:Airport)<-[o3:ORIGIN]-(f2:Flight)-[d4:DESTINATION]->(a3:Airport)
WHERE NOT(a1 = a2) AND NOT(a1 = a3) AND NOT(a2 = a3)
WITH trip, REDUCE(expense = 0, flight IN [n IN NODES(trip) WHERE 'Flight' IN LABELS(n)] | expense + [(flight)<-[:ASSIGN]-(tic:Ticket {class: 'economy'}) | tic.price][0]) as result
RETURN trip, result
ORDER BY result ASC LIMIT 1
